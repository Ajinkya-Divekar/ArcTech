//postsSlice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = [];

const postsSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {
        setPosts: (state, action) => {
            return action.payload; // Replace state with new posts
        },
        addPost: (state, action) => {
            state.push(action.payload); // Add a new post
        },
    },
});

export const { setPosts, addPost } = postsSlice.actions;
export default postsSlice.reducer;

//store.js

import { configureStore } from '@reduxjs/toolkit';
import postsReducer from './postsSlice'; // Import the slice reducer

const store = configureStore({
    reducer: {
        posts: postsReducer, // Assign the slice reducer
    }
});

export default store;


//TableDisplay.js

import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { setPosts, addPost } from './postsSlice';

const TableDisplay = () => {
    const posts = useSelector((state) => state.posts);
    const dispatch = useDispatch();

    useEffect(() => {
        const fetchPosts = async () => {
            try {
                const response = await fetch('https://jsonplaceholder.typicode.com/posts');
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();
                dispatch(setPosts(data.slice(0, 10))); // Store first 10 posts in Redux
            } catch (error) {
                console.error('Error fetching posts:', error);
            }
        };

        fetchPosts();
    }, [dispatch]);

    return (
        <div>
            <h2>Redux Posts</h2>
            <button onClick={() => dispatch(addPost({ id: posts.length + 1, title: 'New Post' }))}>
                Add Post
            </button>
            <ul>
                {posts.map((post) => (
                    <li key={post.id}>{post.title}</li>
                ))}
            </ul>
        </div>
    );
};

export default TableDisplay;
